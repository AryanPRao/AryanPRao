def echelon(L,m,n):
    for row in range(0, m-1):
        pivot=0
        for column in range(n):
            if L[row][column]!=0 and column!=n-1 and pivot==0:
                pivot=L[row][column]
                t=column
                break
        if pivot!=0:
            for row1 in range(row+1,m):
                k2=L[row1][t]
                mul=k2/pivot
                if mul>=0:
                    for y in range(n):
                        L[row1][y]=L[row1][y]-(mul*(L[row][y]))
                else:
                    mul=-1*mul
                    for y in range(n):
                        L[row1][y]=L[row1][y]+(mul*(L[row][y]))
    return L
                        
def reduced_echelon(L,m,n):
    for row in range(1,m):
        pivot=0
        for column in range(n):
            if L[row][column]!=0 and column!=n-1 and pivot==0:
                pivot=L[row][column]
                t=column
                break
        if pivot!=0:
            for row1 in range(0,row):
                k1=L[row1][t]
                mul=k1/pivot
                if mul>=0:
                    for y in range(n):
                        L[row1][y]=L[row1][y]-(mul*(L[row][y]))
                else:
                    mul=-1*mul
                    for y in range(n):
                        L[row1][y]=L[row1][y]+(mul*(L[row][y]))
    return L

red=reduced_echelon(echelon(L,4,5), 4, 5)
for i in red:
    print(i)
